<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>ConnectedProperties</name>
  </assembly>
  <members>
    <member name="T:Nito.ConnectedProperties.ConnectiblePropertyExtensions">
      <summary>
            Provides convenience methods for connectible properties.
            </summary>
    </member>
    <member name="M:Nito.ConnectedProperties.ConnectiblePropertyExtensions.Connect``1(Nito.ConnectedProperties.IConnectibleProperty{``0},``0)">
      <summary>
            Sets the value of the property, throwing an exception if the property was already connected.
            </summary>
      <param name="property">The connectible property. Must not be <c>null</c>.</param>
      <param name="value">The value to set.</param>
      <typeparam name="TValue">The property type.</typeparam>
    </member>
    <member name="M:Nito.ConnectedProperties.ConnectiblePropertyExtensions.Disconnect``1(Nito.ConnectedProperties.IConnectibleProperty{``0})">
      <summary>
            Disconnects the property, throwing an exception if the property was already disconnected.
            </summary>
      <param name="property">The connectible property. Must not be <c>null</c>.</param>
      <typeparam name="TValue">The property type.</typeparam>
    </member>
    <member name="M:Nito.ConnectedProperties.ConnectiblePropertyExtensions.Get``1(Nito.ConnectedProperties.IConnectibleProperty{``0})">
      <summary>
            Gets the value of the property, throwing an exception if the property was disconnected.
            </summary>
      <param name="property">The connectible property. Must not be <c>null</c>.</param>
      <typeparam name="TValue">The property type.</typeparam>
      <returns>The value of the property.</returns>
    </member>
    <member name="M:Nito.ConnectedProperties.ConnectiblePropertyExtensions.GetOrConnect``1(Nito.ConnectedProperties.IConnectibleProperty{``0},``0)">
      <summary>
            Gets the value of the property, if it is connected; otherwise, sets the value of the property and returns the new value.
            </summary>
      <param name="property">The connectible property. Must not be <c>null</c>.</param>
      <param name="connectValue">The new value of the property, if it is disconnected.</param>
      <typeparam name="TValue">The property type.</typeparam>
      <returns>The value of the property.</returns>
    </member>
    <member name="M:Nito.ConnectedProperties.ConnectiblePropertyExtensions.Set``1(Nito.ConnectedProperties.IConnectibleProperty{``0},``0)">
      <summary>
            Sets the value of the property, overwriting any existing value.
            </summary>
      <param name="property">The connectible property. Must not be <c>null</c>.</param>
      <param name="value">The value to set.</param>
      <typeparam name="TValue">The property type.</typeparam>
    </member>
    <member name="T:Nito.ConnectedProperties.IConnectibleProperty`1">
      <summary>
            A property that may be connected to a carrier object at runtime. The property is either connected or disconnected. A disconnected property is different than a connected property value of <c>null</c>. All members are threadsafe.
            </summary>
      <typeparam name="TValue">The property type.</typeparam>
    </member>
    <member name="M:Nito.ConnectedProperties.IConnectibleProperty`1.GetOrCreate(System.Func{`0})">
      <summary>
            Gets the value of the property, if it is connected; otherwise, sets the value of the property and returns the new value.
            </summary>
      <param name="createCallback">The delegate invoked to create the value of the property, if it is disconnected. May not be <c>null</c>. If there is a multithreaded race condition, each thread's delegate may be invoked, but all values except one will be discarded.</param>
      <returns>The value of the property.</returns>
    </member>
    <member name="M:Nito.ConnectedProperties.IConnectibleProperty`1.TryConnect(`0)">
      <summary>
            Sets the value of the property, if it is disconnected. Otherwise, does nothing. Returns <c>true</c> if the property value was set; <c>false</c> if the property was already connected.
            </summary>
      <param name="value">The value to set.</param>
      <returns>
        <c>true</c> if the property value was set; <c>false</c> if the property was already connected.</returns>
    </member>
    <member name="M:Nito.ConnectedProperties.IConnectibleProperty`1.TryDisconnect">
      <summary>
            Attempts to disconnect the property. Returns <c>true</c> if the property was disconnected by this method; <c>false</c> if the property was already disconnected.
            </summary>
      <returns>
        <c>true</c> if the property was disconnected by this method; <c>false</c> if the property was already disconnected.</returns>
    </member>
    <member name="M:Nito.ConnectedProperties.IConnectibleProperty`1.TryGet(`0@)">
      <summary>
            Gets the value of the property, if it is connected. Returns <c>true</c> if the property was returned in <paramref name="value" />; <c>false</c> if the property was disconnected.
            </summary>
      <param name="value">Receives the value of the property, if this method returns <c>true</c>.</param>
      <returns>
        <c>true</c> if the property was returned in <paramref name="value" />; <c>false</c> if the property was disconnected.</returns>
    </member>
    <member name="T:Nito.ConnectedProperties.Explicit.IPropertyConnector`2">
      <summary>
            A property connector. Allows access to a connectible property on various carrier objects.
            </summary>
      <typeparam name="TCarrier">The type of carrier objects to which the property may be connected. This must be a reference type. This may be <see cref="T:System.Object" /> to allow this property to connect to any type of object.</typeparam>
      <typeparam name="TValue">The property type.</typeparam>
    </member>
    <member name="M:Nito.ConnectedProperties.Explicit.IPropertyConnector`2.GetProperty(`0)">
      <summary>
            Gets a connectible property on the specified carrier object, throwing <see cref="T:System.InvalidOperationException" /> if the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable. May not be <c>null</c>.</param>
      <returns>The connectible property.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="carrier" /> may not have connected properties.</exception>
    </member>
    <member name="M:Nito.ConnectedProperties.Explicit.IPropertyConnector`2.GetProperty(`0,System.Boolean)">
      <summary>
            Gets a connectible property on the specified carrier object, optionally bypassing carrier object validation. Throws <see cref="T:System.InvalidOperationException" /> if validation is not bypassed and the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable unless validation is bypassed. May not be <c>null</c>.</param>
      <param name="bypassValidation">Whether to bypass carrier object validation. Normally, callers pass <c>true</c> for this parameter.</param>
      <returns>The connectible property.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="bypassValidation" /> is <c>false</c> and <paramref name="carrier" /> may not have connected properties.</exception>
    </member>
    <member name="M:Nito.ConnectedProperties.Explicit.IPropertyConnector`2.TryGetProperty(`0)">
      <summary>
            Gets a connectible property on the specified carrier object, returning <c>null</c> if the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable. May not be <c>null</c>.</param>
      <returns>The connectible property, or <c>null</c> if <paramref name="carrier" /> may not have connected properties.</returns>
    </member>
    <member name="M:Nito.ConnectedProperties.Explicit.IPropertyConnector`2.TryGetProperty(`0,System.Boolean)">
      <summary>
            Gets a connectible property on the specified carrier object, optionally bypassing carrier object validation. Returns <c>null</c> if validation is not bypassed and the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable unless validation is bypassed. May not be <c>null</c>.</param>
      <param name="bypassValidation">Whether to bypass carrier object validation. Normally, callers pass <c>true</c> for this parameter.</param>
      <returns>The connectible property, or <c>null</c> if <paramref name="bypassValidation" /> is <c>false</c> and <paramref name="carrier" /> may not have connected properties.</returns>
    </member>
    <member name="T:Nito.ConnectedProperties.Explicit.PropertyConnector`2">
      <summary>
            A property connector. Allows access to a connectible property on various carrier objects.
            </summary>
      <typeparam name="TCarrier">The type of carrier objects to which the property may be connected. This must be a reference type. This may be <see cref="T:System.Object" /> to allow this property to connect to any type of object.</typeparam>
      <typeparam name="TValue">The property type.</typeparam>
    </member>
    <member name="M:Nito.ConnectedProperties.Explicit.PropertyConnector`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.ConnectedProperties.Explicit.PropertyConnector`2" /> class.
            </summary>
    </member>
    <member name="M:Nito.ConnectedProperties.Explicit.PropertyConnector`2.GetProperty(`0)">
      <summary>
            Gets a connectible property on the specified carrier object, throwing <see cref="T:System.InvalidOperationException" /> if the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable. May not be <c>null</c>.</param>
      <returns>The connectible property.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="carrier" /> may not have connected properties.</exception>
    </member>
    <member name="M:Nito.ConnectedProperties.Explicit.PropertyConnector`2.GetProperty(`0,System.Boolean)">
      <summary>
            Gets a connectible property on the specified carrier object, optionally bypassing carrier object validation. Throws <see cref="T:System.InvalidOperationException" /> if validation is not bypassed and the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable unless validation is bypassed. May not be <c>null</c>.</param>
      <param name="bypassValidation">Whether to bypass carrier object validation. Normally, callers pass <c>true</c> for this parameter.</param>
      <returns>The connectible property.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="bypassValidation" /> is <c>false</c> and <paramref name="carrier" /> may not have connected properties.</exception>
    </member>
    <member name="M:Nito.ConnectedProperties.Explicit.PropertyConnector`2.TryGetProperty(`0)">
      <summary>
            Gets a connectible property on the specified carrier object, returning <c>null</c> if the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable. May not be <c>null</c>.</param>
      <returns>The connectible property, or <c>null</c> if <paramref name="carrier" /> may not have connected properties.</returns>
    </member>
    <member name="M:Nito.ConnectedProperties.Explicit.PropertyConnector`2.TryGetProperty(`0,System.Boolean)">
      <summary>
            Gets a connectible property on the specified carrier object, optionally bypassing carrier object validation. Returns <c>null</c> if validation is not bypassed and the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable unless validation is bypassed. May not be <c>null</c>.</param>
      <param name="bypassValidation">Whether to bypass carrier object validation. Normally, callers pass <c>true</c> for this parameter.</param>
      <returns>The connectible property, or <c>null</c> if <paramref name="bypassValidation" /> is <c>false</c> and <paramref name="carrier" /> may not have connected properties.</returns>
    </member>
    <member name="T:Nito.ConnectedProperties.Implicit.ObjectExtensions">
      <summary>
            Extensions to allow accessing implicit connected properties from any reference object.
            </summary>
    </member>
    <member name="M:Nito.ConnectedProperties.Implicit.ObjectExtensions.GetConnectedProperty``1(System.Object)">
      <summary>
            Gets a dynamic connectible property for a specific carrier object, throwing <see cref="T:System.InvalidOperationException" /> if the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable. May not be <c>null</c>.</param>
      <typeparam name="TTag">A "tag" type used to distinguish different implicit connected properties.</typeparam>
      <returns>The connectible property.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="carrier" /> may not have connected properties.</exception>
    </member>
    <member name="M:Nito.ConnectedProperties.Implicit.ObjectExtensions.GetConnectedProperty``2(System.Object)">
      <summary>
            Gets a connectible property for a specific carrier object, throwing <see cref="T:System.InvalidOperationException" /> if the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable. May not be <c>null</c>.</param>
      <typeparam name="TValue">The property type.</typeparam>
      <typeparam name="TTag">A "tag" type used to distinguish different implicit connected properties.</typeparam>
      <returns>The connectible property.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="carrier" /> may not have connected properties.</exception>
    </member>
    <member name="M:Nito.ConnectedProperties.Implicit.ObjectExtensions.GetConnectedProperty``2(System.Object,System.Boolean)">
      <summary>
            Gets a connectible property for a specific carrier object, optionally bypassing carrier object validation. Throws <see cref="T:System.InvalidOperationException" /> if validation is not bypassed and the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable unless validation is bypassed. May not be <c>null</c>.</param>
      <param name="bypassValidation">Whether to bypass carrier object validation. Normally, callers pass <c>true</c> for this parameter.</param>
      <typeparam name="TValue">The property type.</typeparam>
      <typeparam name="TTag">A "tag" type used to distinguish different implicit connected properties.</typeparam>
      <returns>The connectible property.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="bypassValidation" /> is <c>false</c> and <paramref name="carrier" /> may not have connected properties.</exception>
    </member>
    <member name="M:Nito.ConnectedProperties.Implicit.ObjectExtensions.GetConnectedProperty``1(System.Object,System.Boolean)">
      <summary>
            Gets a dynamic connectible property for a specific carrier object, optionally bypassing carrier object validation. Throws <see cref="T:System.InvalidOperationException" /> if validation is not bypassed and the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable unless validation is bypassed. May not be <c>null</c>.</param>
      <param name="bypassValidation">Whether to bypass carrier object validation. Normally, callers pass <c>true</c> for this parameter.</param>
      <typeparam name="TTag">A "tag" type used to distinguish different implicit connected properties.</typeparam>
      <returns>The connectible property.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="bypassValidation" /> is <c>false</c> and <paramref name="carrier" /> may not have connected properties.</exception>
    </member>
    <member name="M:Nito.ConnectedProperties.Implicit.ObjectExtensions.TryGetConnectedProperty``2(System.Object)">
      <summary>
            Gets a connectible property for a specific carrier object, returning <c>null</c> if the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable. May not be <c>null</c>.</param>
      <typeparam name="TValue">The property type.</typeparam>
      <typeparam name="TTag">A "tag" type used to distinguish different implicit connected properties.</typeparam>
      <returns>The connectible property, or <c>null</c> if <paramref name="carrier" /> may not have connected properties.</returns>
    </member>
    <member name="M:Nito.ConnectedProperties.Implicit.ObjectExtensions.TryGetConnectedProperty``1(System.Object)">
      <summary>
            Gets a dynamic connectible property for a specific carrier object, returning <c>null</c> if the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable. May not be <c>null</c>.</param>
      <typeparam name="TTag">A "tag" type used to distinguish different implicit connected properties.</typeparam>
      <returns>The connectible property, or <c>null</c> if <paramref name="carrier" /> may not have connected properties.</returns>
    </member>
    <member name="M:Nito.ConnectedProperties.Implicit.ObjectExtensions.TryGetConnectedProperty``1(System.Object,System.Boolean)">
      <summary>
            Gets a dynamic connectible property for a specific carrier object, optionally bypassing carrier object validation. Returns <c>null</c> if validation is not bypassed and the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable. May not be <c>null</c>.</param>
      <param name="bypassValidation">Whether to bypass carrier object validation. Normally, callers pass <c>true</c> for this parameter.</param>
      <typeparam name="TTag">A "tag" type used to distinguish different implicit connected properties.</typeparam>
      <returns>The connectible property, or <c>null</c> if <paramref name="bypassValidation" /> is <c>false</c> and <paramref name="carrier" /> may not have connected properties.</returns>
    </member>
    <member name="M:Nito.ConnectedProperties.Implicit.ObjectExtensions.TryGetConnectedProperty``2(System.Object,System.Boolean)">
      <summary>
            Gets a connectible property for a specific carrier object, optionally bypassing carrier object validation. Returns <c>null</c> if validation is not bypassed and the specified object cannot have connected properties.
            </summary>
      <param name="carrier">The carrier object for which to retrieve the connectible property. This object must be reference-equatable unless validation is bypassed. May not be <c>null</c>.</param>
      <param name="bypassValidation">Whether to bypass carrier object validation. Normally, callers pass <c>true</c> for this parameter.</param>
      <typeparam name="TValue">The property type.</typeparam>
      <typeparam name="TTag">A "tag" type used to distinguish different implicit connected properties.</typeparam>
      <returns>The connectible property, or <c>null</c> if <paramref name="bypassValidation" /> is <c>false</c> and <paramref name="carrier" /> may not have connected properties.</returns>
    </member>
  </members>
</doc>