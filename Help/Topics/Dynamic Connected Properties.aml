<?xml version="1.0" encoding="utf-8"?>
<topic id="65d31d99-e5eb-4176-ba90-17bf8d264717" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Connected properties are dynamic by nature, and it's sometimes useful to have connected properties of type <codeInline>dynamic</codeInline>.</para>
    </introduction>
    <section address="Section1">
      <title>Dynamic Connected Properties</title>
      <content>

<para>Implicit connectors have a "default <codeInline>TValue</codeInline> type" of <codeInline>dynamic</codeInline>, as demonstrated by this code:</para>

<code language="C#">
<![CDATA[
internal struct DynamicPropertyTag {}

public static void Test(object obj)
{
  // Set the property to be an integer and overwrite it with a string.
  obj.GetConnectedProperty<DynamicPropertyTag>().Set(13);
  obj.GetConnectedProperty<DynamicPropertyTag>().Set("Bob");

  // Even more dynamic fun: set the property to be an ExpandoObject.
  obj.GetConnectedProperty<DynamicPropertyTag>().Set(new ExpandoObject());
  obj.GetConnectedProperty<DynamicPropertyTag>().Get().NewProperty = 13;
  obj.GetConnectedProperty<DynamicPropertyTag>().Get().Name = "Bob";
}
]]>
</code>

<para>The code example above sets the value to an instance of <codeEntityReference>T:System.Dynamic.ExpandoObject</codeEntityReference>, which is commonly used with the <codeInline>dynamic</codeInline> type. However, note that thread safety of the value is your responsibility.</para>

<alert class="caution">
<para>The Connected Properties API (e.g., <codeInline>Get</codeInline>) is thread-safe, but the thread-safety of the values is your responsibility. In the example above, the <codeEntityReference>T:System.Dynamic.ExpandoObject</codeEntityReference> instance is not thread-safe.</para>
</alert>

<para>Explicit connectors do not have a "default <codeInline>TValue</codeInline> type", but you may specify <codeInline>dynamic</codeInline> for <codeInline>TValue</codeInline>.</para>

      </content>
    </section>
  </developerConceptualDocument>
</topic>