<?xml version="1.0" encoding="utf-8"?>
<topic id="c6de5102-53ec-4cbd-b6bb-cf8f0909d286" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>A connectible property is either connected or disconnected.</para>
    </introduction>
    <section address="Section1">
      <title>Connected Property Values</title>
      <content>
<para>When a property is connected to a carrier object, it has a value related to that object.</para>

<alert class="note">
<para>A disconnected property is different than a connected property with a value of <codeInline>null</codeInline>.</para>
</alert>

<para>Connected properties expose the following API (which is a combination of methods on the <codeEntityReference qualifyHint="true">T:Nito.ConnectedProperties.IConnectibleProperty`1</codeEntityReference> interface and extension methods in <codeEntityReference qualifyHint="true">T:Nito.ConnectedProperties.ConnectiblePropertyExtensions</codeEntityReference>):</para>

<code language="C#">
<![CDATA[
/// <summary>
/// Sets the value of the property, overwriting any existing value.
/// </summary>
/// <param name="value">The value to set.</param>
void Set(TValue value);

/// <summary>
/// Gets the value of the property, if it is connected. Returns <c>true</c> if the property was returned in <paramref name="value"/>; <c>false</c> if the property was disconnected.
/// </summary>
/// <param name="value">Receives the value of the property, if this method returns <c>true</c>.</param>
/// <returns><c>true</c> if the property was returned in <paramref name="value"/>; <c>false</c> if the property was disconnected.</returns>
bool TryGet(out TValue value);

/// <summary>
/// Gets the value of the property, throwing an exception if the property was disconnected.
/// </summary>
/// <returns>The value of the property.</returns>
TValue Get();

/// <summary>
/// Sets the value of the property, if it is disconnected. Otherwise, does nothing. Returns <c>true</c> if the property value was set; <c>false</c> if the property was already connected.
/// </summary>
/// <param name="value">The value to set.</param>
/// <returns><c>true</c> if the property value was set; <c>false</c> if the property was already connected.</returns>
bool TryConnect(TValue value);

/// <summary>
/// Sets the value of the property, throwing an exception if the property was already connected.
/// </summary>
/// <param name="value">The value to set.</param>
void Connect(TValue value);

/// <summary>
/// Gets the value of the property, if it is connected; otherwise, sets the value of the property and returns the new value.
/// </summary>
/// <param name="connectValue">The new value of the property, if it is disconnected.</param>
/// <returns>The value of the property.</returns>
TValue GetOrConnect(TValue connectValue);

/// <summary>
/// Gets the value of the property, if it is connected; otherwise, sets the value of the property and returns the new value.
/// </summary>
/// <param name="createCallback">The delegate invoked to create the value of the property, if it is disconnected. May not be <c>null</c>. If there is a multithreaded race condition, each thread's delegate may be invoked, but all values except one will be discarded.</param>
/// <returns>The value of the property.</returns>
TValue GetOrCreate(Func<TValue> createCallback);

/// <summary>
/// Attempts to disconnect the property. Returns <c>true</c> if the property was disconnected by this method; <c>false</c> if the property was already disconnected.
/// </summary>
/// <returns><c>true</c> if the property was disconnected by this method; <c>false</c> if the property was already disconnected.</returns>
bool TryDisconnect();

/// <summary>
/// Disconnects the property, throwing an exception if the property was already disconnected.
/// </summary>
void Disconnect();
]]>
</code>

      </content>
    </section>
  </developerConceptualDocument>
</topic>